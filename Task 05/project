
#include <ch32v003fun.h>

#define LDR_PIN     GPIO_Pin_1  // D3 -> PA1 (ADC_IN1)
#define LED_PIN     GPIO_Pin_2  // D6 -> PA2

void setup_adc()
{
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);

    GPIO_InitTypeDef gpio;
    gpio.GPIO_Pin = LDR_PIN;
    gpio.GPIO_Mode = GPIO_Mode_AIN;
    GPIO_Init(GPIOA, &gpio);

    ADC1->CTLR2 |= ADC_EXTTRIGConv_None;
    ADC1->CTLR2 |= ADC_ADON;
    Delay_Ms(1);
    ADC1->CTLR2 |= ADC_ADON;
}

uint16_t read_adc()
{
    ADC1->SAMPTR2 = ADC_SampleTime_239Cycles5 << ADC_Channel_1_Pos;
    ADC1->RSQR3 = 1;
    ADC1->CTLR2 |= ADC_SWSTART;
    while (!(ADC1->STATR & ADC_STATR_EOC));
    return ADC1->RDATAR;
}

int main()
{
    SystemInit();
    Delay_Init();

    // Setup LED pin
    GPIO_InitTypeDef gpio_led;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    gpio_led.GPIO_Pin = LED_PIN;
    gpio_led.GPIO_Speed = GPIO_Speed_10MHz;
    gpio_led.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIOA, &gpio_led);

    // Setup ADC for LDR
    setup_adc();

    while (1)
    {
        uint16_t ldr_value = read_adc();

        if (ldr_value < 1000)  // Adjust threshold as needed
        {
            GPIO_ResetBits(GPIOA, LED_PIN); // LED ON
        }
        else
        {
            GPIO_SetBits(GPIOA, LED_PIN);   // LED OFF
        }

        Delay_Ms(200);
    }
}
